<?php

namespace Kunstmaan\PagePartBundle\Tests\Service;

use Kunstmaan\PagePartBundle\Helper\HasPagePartsInterface;
use Kunstmaan\PagePartBundle\Service\PagePartService;
use Kunstmaan\PagePartBundle\Tests\Stubs\TestPage;
use PHPUnit_Framework_MockObject_MockObject;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-13 at 13:05:41.
 */
class PagePartServiceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PagePartService
     */
    protected $object;

    /**
     * @var PHPUnit_Framework_MockObject_MockObject
     */
    private $container;

    /**
     * @var PHPUnit_Framework_MockObject_MockObject
     */
    private $pagePartConfigReader;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->container = $this->getMock('Symfony\Component\DependencyInjection\ContainerInterface');
        $this->pagePartConfigReader = $this->getMock('Kunstmaan\PagePartBundle\Helper\PagePartConfigurationReaderInterface');
        $this->object = new PagePartService($this->container, $this->pagePartConfigReader);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @return HasPagePartsInterface
     */
    private function getPageMock()
    {
        $page = new TestPage();

        return $page;
    }

    private function getEntityManagerMock()
    {
        $em = $this->getMockBuilder('Doctrine\ORM\EntityManager')
            ->disableOriginalConstructor()
            ->getMock();

        return $em;
    }

    /**
     * @covers Kunstmaan\PagePartBundle\Service\PagePartService::getPagePartAdminConfigurators
     */
    public function testGetPagePartAdminConfigurators()
    {
        $page = $this->getPageMock();
        $ppAdminConfigs = array();
        $ppAdminConfigs[] = $this->getMockForAbstractClass('Kunstmaan\PagePartBundle\PagePartAdmin\AbstractPagePartAdminConfigurator');
        $ppAdminConfigs[] = $this->getMockForAbstractClass('Kunstmaan\PagePartBundle\PagePartAdmin\AbstractPagePartAdminConfigurator');

        $this->pagePartConfigReader
            ->expects($this->once())
            ->method('getPagePartAdminConfigurators')
            ->with($page)
            ->will($this->returnValue($ppAdminConfigs));

        $this->assertEquals($ppAdminConfigs, $this->object->getPagePartAdminConfigurators($page));
    }

    /**
     * @covers Kunstmaan\PagePartBundle\Service\PagePartService::getPagePartAdmin
     */
    public function testGetPagePartAdmin()
    {
        $em = $this->getEntityManagerMock();

        $this->container
            ->expects($this->once())
            ->method('get')
            ->with('doctrine.orm.entity_manager')
            ->will($this->returnValue($em));

        $configurator = $this->getMockForAbstractClass('Kunstmaan\PagePartBundle\PagePartAdmin\AbstractPagePartAdminConfigurator');
        $page = $this->getPageMock();

        $this->assertInstanceOf('Kunstmaan\PagePartBundle\PagePartAdmin\PagePartAdmin', $this->object->getPagePartAdmin($configurator, $page));
    }

    /**
     * @covers Kunstmaan\PagePartBundle\Service\PagePartService::getPagePartContexts
     */
    public function testGetPagePartContexts()
    {
        $page = $this->getPageMock();
        $contexts = array('main', 'footer');

        $this->pagePartConfigReader
            ->expects($this->once())
            ->method('getPagePartContexts')
            ->with($page)
            ->will($this->returnValue($contexts));

        $this->assertEquals($contexts, $this->object->getPagePartContexts($page));
    }
}
